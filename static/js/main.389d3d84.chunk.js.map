{"version":3,"sources":["components/MatchCard/MatchCard.js","components/Wrapper/Wrapper.js","components/Title/Title.js","App.js","serviceWorker.js","index.js"],"names":["MatchCard","props","react_default","a","createElement","onClick","setClicked","id","className","alt","name","src","image","Wrapper","children","Title","correctGuesses","bestScore","clickMessage","App","state","matches","_this","clickedMatch","filter","match","clicked","console","log","i","length","setState","sort","b","Math","random","_this2","this","components_Wrapper_Wrapper","components_Title_Title","map","components_MatchCard_MatchCard","key","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wgCAWeA,SARG,SAAAC,GAAK,OACtBC,EAAAC,EAAAC,cAAA,OAAKC,QAAS,kBAAMJ,EAAMK,WAAWL,EAAMM,KAAKC,UAAU,QACzDN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACTN,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,YCD1BC,SAFC,SAAAZ,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,WAAWP,EAAMa,YCE1CC,SAFD,SAAAd,GAAK,OAAIC,EAAAC,EAAAC,cAAA,MAAII,UAAU,SAASP,EAAMa,mBCIhDE,SAAiB,GACjBC,EAAY,EACZC,EAAe,GA6FJC,6MAzFbC,MAAQ,CACNC,UACAL,iBACAC,YACAC,kBAGFZ,WAAa,SAAAC,GACX,IAAMc,EAAUC,EAAKF,MAAMC,QACrBE,EAAeF,EAAQG,OAAO,SAAAC,GAAK,OAAIA,EAAMlB,KAAOA,IAE1D,GAAIgB,EAAa,GAAGG,QAAQ,CAC1BC,QAAQC,IAAI,oBAAsBZ,GAClCW,QAAQC,IAAI,eAAiBX,GAE7BD,EAAiB,EACjBE,EAAe,wDAEf,IAAK,IAAIW,EAAI,EAAGA,EAAIR,EAAQS,OAAQD,IAClCR,EAAQQ,GAAGH,SAAU,EAGvBJ,EAAKS,SAAS,CAACb,iBACfI,EAAKS,SAAS,CAAEf,mBAChBM,EAAKS,SAAS,CAACV,iBAEZ,GAAIL,EAAiB,GAExBO,EAAa,GAAGG,SAAS,EAIzBR,EAAe,eAFfF,EAIqBC,IACnBA,EAAYD,EACZM,EAAKS,SAAS,CAAEd,eAGlBI,EAAQW,KAAK,SAAS7B,EAAG8B,GACvB,MAAO,GAAMC,KAAKC,WAEpBb,EAAKS,SAAS,CAAEV,YAChBC,EAAKS,SAAS,CAAEf,mBAChBM,EAAKS,SAAS,CAAEb,qBACX,CAELK,EAAa,GAAGG,SAAU,EAE1BV,EAAiB,EAEjBE,EAAe,2CAEfD,EAAY,GACZK,EAAKS,SAAS,CAAEd,cAEhB,IAAK,IAAIY,EAAE,EAAGA,EAAIR,EAAQS,OAASD,IACjCR,EAAQQ,GAAGH,SAAU,EAGvBL,EAAQW,KAAK,SAAS7B,EAAG8B,GACvB,MAAO,GAAMC,KAAKC,WAElBb,EAAKS,SAAS,CAAEV,YAChBC,EAAKS,SAAS,CAAEf,mBAChBM,EAAKS,SAAS,CAAEb,2FAIb,IAAAkB,EAAAC,KACP,OACEnC,EAAAC,EAAAC,cAACkC,EAAD,KACEpC,EAAAC,EAAAC,cAACmC,EAAD,0GACJrC,EAAAC,EAAAC,cAACmC,EAAD,CAAO/B,UAAY,gBAAeN,EAAAC,EAAAC,cAAA,kCAA0BiC,KAAKjB,MAAMJ,eAArC,2BAAiFqB,KAAKjB,MAAMH,YAC9Hf,EAAAC,EAAAC,cAACmC,EAAD,CAAO/B,UAAY,gBAAgB6B,KAAKjB,MAAMF,cAEzCmB,KAAKjB,MAAMC,QAAQmB,IAAI,SAAAf,GAAK,OAC3BvB,EAAAC,EAAAC,cAACqC,EAAD,CACAnC,WAAc8B,EAAK9B,WACnBC,GAAMkB,EAAMlB,GACZmC,IAAOjB,EAAMlB,GACbK,MAASa,EAAMb,kBAnFP+B,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStB,MACvB,2DCZNuB,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.389d3d84.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./MatchCards.css\";\n\nconst MatchCard = props => (\n\t<div onClick={() => props.setClicked(props.id)} className=\"card\">\n\t\t<div className=\"img-container\">\n      \t\t<img alt={props.name} src={props.image} />\n    \t</div>\n  </div>\n);\n\nexport default MatchCard;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\n\nexport default Title;\n","import React, { Component } from 'react';\nimport MatchCard from \"./components/MatchCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport matches from \"./matchcards.json\";\nimport './App.css';\n\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage = \"\" ;\n\nclass App extends Component {\n\n  state = {\n    matches,\n    correctGuesses,\n    bestScore,\n    clickMessage\n  };\n\n  setClicked = id => {\n    const matches = this.state.matches;\n    const clickedMatch = matches.filter(match => match.id === id);\n\n    if (clickedMatch[0].clicked){\n      console.log(\"Correct Guesses: \" + correctGuesses);\n      console.log(\"Best Score: \" + bestScore);\n\n      correctGuesses = 0;\n      clickMessage = \"You know nothing.  You already clicked on that image.\"\n\n      for (let i = 0; i < matches.length; i++){\n        matches[i].clicked = false;\n      }\n\n      this.setState({clickMessage});\n      this.setState({ correctGuesses});\n      this.setState({matches});\n    }\n    else if (correctGuesses < 11) {\n\n      clickedMatch[0].clicked =true;\n\n      correctGuesses++;\n\n      clickMessage = \"Keep Going\";\n\n      if (correctGuesses > bestScore){\n        bestScore = correctGuesses;\n        this.setState({ bestScore });\n      }\n\n      matches.sort(function(a, b){\n        return 0.5 - Math.random() });\n\n      this.setState({ matches });\n      this.setState({ correctGuesses });\n      this.setState({ clickMessage });\n    } else {\n\n      clickedMatch[0].clicked = true;\n\n      correctGuesses = 0;\n\n      clickMessage = \"You shall live another day.  Play again.\";\n\n      bestScore = 12;\n      this.setState({ bestScore });\n\n      for (let i=0; i < matches.length ; i++) {\n        matches[i].clicked = false;\n      }\n\n      matches.sort(function(a, b) { \n        return 0.5 - Math.random() });\n\n        this.setState({ matches });\n        this.setState({ correctGuesses });\n        this.setState({ clickMessage });\n    }\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Title>Click each image to earn a point but don't click on any of them more than once, or you will lose.</Title>\n    <Title className = \"scoreSummary\"><strong>Correct Guesses: {this.state.correctGuesses} &nbsp; |  &nbsp;BestScore: {this.state.bestScore}</strong></Title>\n    <Title className = \"clickMessage\">{this.state.clickMessage}</Title>\n\n        {this.state.matches.map(match => (\n          <MatchCard\n          setClicked = {this.setClicked}\n          id = {match.id}\n          key = {match.id}\n          image = {match.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}